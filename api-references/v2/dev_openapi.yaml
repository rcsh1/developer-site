openapi: 3.0.3
info:
  title: Cobo Wallet as a Service 2.0
  description: |
    Cobo WaaS 2.0 enables you to programmatically access Cobo's full suite of
    crypto wallet technologies with powerful and flexible access controls.

    # Wallet technologies
    - Custodial Wallet
    - MPC Wallet
    - Smart Contract Wallet (Based on Safe{Wallet})
    - Exchange Wallet

    # Risk Control technologies
    - Workflow
    - Access Control List (ACL)

    # Risk Control targets
    - Wallet Management
      - User/team and their permission management
      - Risk control configurations, e.g. whitelist, blacklist, rate-limiting etc.
    - Blockchain Interaction
      - Crypto transfer
      - Smart Contract Invocation

    # Important
    HTTPS only. RESTful, resource oriented

    # Get Started
    Set up your APIs or get authorization

    # Authentication and Authorization
    CoboAuth

    # Request and Response
    application/json

    # Error Handling

    ### Common error codes
    | Error Code | Description |
    | -- | -- |

    ### API-specific error codes
    For error codes that are dedicated to a specific API, see the Error codes section in each API specification, for example, /v3/wallets.

    # Rate and Usage Limiting

    # Idempotent Request

    # Pagination
    # Support
    [Developer Hub](https://cobo.com/developers)
  termsOfService: 'https://cobo.com/waas/tos/'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Cobo WaaS
    url: 'https://www.cobo.com/waas'
    email: support@cobo.com
  version: 1.0.0
servers:
  - url: 'https://api.cobo.com/v3'
    description: Production environment
  - url: 'https://api.dev.cobo.com/v3'
    description: Development environment
tags:
  - name: Wallets
    description: Operations related to all wallets.
  - name: Wallets - MPC Wallet
    description: Operations related to mpc wallet.
  - name: Wallets - Exchange Wallet
    description: Operations related to exchange wallet.
  - name: Transactions
    description: Operations related to all transactions.
  - name: Developers - Webhooks
    description: Operations related to webhooks.
paths:
  /wallets/chains:
    get:
      tags:
        - Wallets
      operationId: get_chains
      summary: List the metadata of chain
      description: Retrieve a list of chain metadata.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets/assets:
    get:
      tags:
        - Wallets
      operationId: get_assets
      summary: List the metadata of assets
      description: Retrieve a list of asset metadata.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalAssetIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAssetsResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets/tokens:
    get:
      tags:
        - Wallets
      operationId: get_tokens
      summary: List the metadata of tokens
      description: Retrieve a list of token metadata.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets/supported_chains:
    get:
      tags:
        - Wallets
      operationId: get_supported_chains
      summary: List the supported chains by wallet subtype
      description: Retrieve a list of supported chain.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredWalletSubtypeParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainsResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets/supported_tokens:
    get:
      tags:
        - Wallets
      operationId: get_supported_tokens
      summary: List the supported tokens by wallet subtype and chain id if specified
      description: Retrieve a list of supported token.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokensResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/tokens':
    get:
      tags:
        - Wallets
      operationId: get_wallet_token_balances
      summary: List the token balance in the wallets(to be specific)
      description: Retrieve a list of token balance in wallet.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/addresses/{address_id}/tokens':
    get:
      tags:
        - Wallets
      operationId: get_wallet_address_token_balances
      summary: List the token balance by address in the wallets(to be specific)
      description: Retrieve a list of token balance by address in wallet.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/addressIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTokenBalancesResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets:
    post:
      tags:
        - Wallets
      operationId: create_wallet
      summary: Create new wallet
      description: |
        ..More detailed explanation on creating a new wallet..

        Error codes this API may return:
        | Error Code | Description |
        | -- | -- |
        | `2003` | 必选参数缺失 |
        | `2006` | 参数格式或者值非法 |
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createWalletBody'
      responses:
        '201':
          $ref: '#/components/responses/createWalletResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    get:
      tags:
        - Wallets
      operationId: list_wallets
      summary: List all wallets
      description: Retrieve a list of wallets.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalWalletTypeParam'
        - $ref: '#/components/parameters/optionalWalletSubtypeParam'
        - $ref: '#/components/parameters/optionalVaultIdQueryParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getWalletsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/{wallet_id}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets
      operationId: get_wallet_by_id
      summary: Get wallet information by ID
      description: Retrieve wallet information by ID
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getWalletByIdResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
    put:
      tags:
        - Wallets
      operationId: update_wallet_by_id
      summary: Update wallet by ID
      description: Update wallet info by ID
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateWalletBody'
      responses:
        '200':
          $ref: '#/components/responses/updateWalletResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
    delete:
      tags:
        - Wallets
      operationId: delete_wallet_by_id
      summary: Delete a wallet by ID
      description: Delete a specific wallet by ID
      security:
        - CoboAuth: []
      responses:
        '204':
          description: Resource successfully deleted
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/spendables':
    get:
      tags:
        - Wallets
      operationId: get_spendable_list
      summary: List the spendable utxo
      description: Retrieve a list of spendable utxo.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/addressStrParam'
      responses:
        '200':
          $ref: '#/components/responses/spendableListResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/max_sendable_value':
    get:
      tags:
        - Wallets
      operationId: get_max_send_value
      summary: Get max sendable Vaule
      description: Retrieve the maximum sendable vaule and the corresponding transaction fee for a given address.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/walletIdParam'
        - $ref: '#/components/parameters/toAddressStrParam'
        - $ref: '#/components/parameters/fromAddressStrParam'
      responses:
        '200':
          $ref: '#/components/responses/maxSendValueResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/addresses':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    post:
      tags:
        - Wallets
      operationId: add_wallet_address
      summary: Add address to a wallet
      description: Add address to a wallet.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createAddressBody'
      responses:
        '201':
          $ref: '#/components/responses/createAddressResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
    get:
      tags:
        - Wallets
      operationId: list_addresses
      summary: List wallet addresses by wallet ID
      description: Retrieve a list of addresses.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressesResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/{wallet_id}/addresses/{address_id}':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
      - $ref: '#/components/parameters/addressIdParam'
    get:
      tags:
        - Wallets
      operationId: get_wallet_address_by_id
      summary: Get address information by ID
      description: Retrieve wallet information by ID
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getAddressByIdResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets/address/validity:
    get:
      tags:
        - Wallets
      operationId: get_address_validity
      summary: Get the given address validity for token
      description: Check if the given address valid.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredTokenIdParam'
        - $ref: '#/components/parameters/requiredAddressStrParam'
      responses:
        '200':
          $ref: '#/components/responses/getAddressValidityResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets/mpc/cobo_key_holders:
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_cobo_key_holder
      summary: List all cobo key holders
      description: Retrieve a list of key holders.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getCoboKeyHoldersResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  /wallets/mpc/projects:
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_mpc_project
      summary: List all mpc projects
      description: Retrieve a list of mpc project.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_mpc_project
      summary: Create a mpc project
      description: create a mpc project
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createMpcProjectBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/mpc/projects/{project_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_mpc_project
      summary: get a mpc project
      description: get a mpc vault
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: update_mpc_project
      summary: update a mpc project
      description: update a mpc vault
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/projectIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateProjectBody'
      responses:
        '200':
          $ref: '#/components/responses/getMpcProjectResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
  /wallets/mpc/vaults:
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_mpc_vault
      summary: List all mpc vaults
      description: Retrieve a list of mpc vault.
      security:
        - CoboAuth: []
      parameters:
        - name: project_id
          in: query
          description: Unique id of the mpc project
          schema:
            type: string
            format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_mpc_vault
      summary: Create a mpc vault
      description: create a mpc vault
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createMpcVaultBody'
      responses:
        '201':
          $ref: '#/components/responses/createMpcVaultResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/mpc/vaults/{vault_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_mpc_vault
      summary: get a mpc vault
      description: get a mpc vault
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getMpcVaultResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: modify_mpc_vault
      summary: Modify a mpc vault
      description: modify a mpc vault
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/updateVaultBody'
      responses:
        '200':
          $ref: '#/components/responses/putVaultResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/key_groups':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_key_group
      summary: List all mpc key groups
      description: Retrieve a list of mpc key groups.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/optionalKeyGroupTypeParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyGroupsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_key_group
      summary: create a mpc key group
      description: create a mpc key group.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createKeyGroupBody'
      responses:
        '201':
          $ref: '#/components/responses/createKeyGroupsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/key_groups/{key_group_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_key_group
      summary: get a mpc key group
      description: get a mpc key group.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getKeyGroupResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    delete:
      tags:
        - Wallets - MPC Wallet
      operationId: delete_key_group
      summary: delete a mpc key group
      description: delete a mpc key group.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
      responses:
        '200':
          $ref: '#/components/responses/deleteKeyGroupResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: update_key_group
      summary: update a mpc key group
      description: update a mpc key group.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/keyGroupIdParam'
        - $ref: '#/components/parameters/requiredUpdateKeyGroupActionParam'
      responses:
        '200':
          $ref: '#/components/responses/putKeyGroupResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: list_tss_request
      summary: List tss request information of a vault
      description: Detailed description on retrieving list of tss request information
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/optionalTargetKeyGroupIDParam'
      responses:
        '200':
          $ref: '#/components/responses/getTssRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    post:
      tags:
        - Wallets - MPC Wallet
      operationId: create_tss_request
      summary: Create a tss request to generate key secrets for a tss group
      description: Create a tss request to generate key secrets for a tss group
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
      requestBody:
        $ref: '#/components/requestBodies/createTssRequestBody'
      responses:
        '201':
          description: mpc vault successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TSSRequest'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/mpc/vaults/{vault_id}/tss_requests/{tss_request_id}':
    get:
      tags:
        - Wallets - MPC Wallet
      operationId: get_tss_request
      summary: get a tss request
      description: get a tss request.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getTssRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
        '503':
          $ref: '#/components/responses/serviceUnavailableError'
    put:
      tags:
        - Wallets - MPC Wallet
      operationId: cancel_tss_request
      summary: cancel tss request
      description: cancel tss request.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/vaultIdParam'
        - $ref: '#/components/parameters/tssRequestIdParam'
        - $ref: '#/components/parameters/requiredTssRequestActionParam'
      responses:
        '200':
          $ref: '#/components/responses/putTssRequestResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/exchanges/{exchange_id}/supported_assets':
    parameters:
      - $ref: '#/components/parameters/exchangeIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: get_exchange_supported_assets
      summary: List the supported assets by exchange id
      description: Retrieve a list of supported asset.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAssetsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/exchanges/{exchange_id}/assets/supported_chains':
    parameters:
      - $ref: '#/components/parameters/exchangeIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: get_exchange_supported_chains
      summary: List the supported chains by exchange id and asset id
      description: Retrieve a list of supported chains.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredAssetIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: Successfully listed chains
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChainInfo'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/wallets/exchanges/{wallet_id}/assets':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: get_exchange_wallet_asset_balances
      summary: List the asset balance in exchange wallet
      description: Retrieve a list of asset balance in exchange wallet.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/requiredSubWalletIdParam'
        - $ref: '#/components/parameters/optionalAssetIdParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getAssetBalancesResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /wallets/exchanges/settings:
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_exchanges
      summary: List of exchanges
      description: Retrieve a list of exchanges.
      security:
        - CoboAuth: []
      responses:
        '200':
          description: Successfully list of exchange sub account ids
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  description: Settings details for the exchange
                  required:
                    - exchange_id
                    - supported_sub_wallet_ids
                  properties:
                    exchange_id:
                      $ref: '#/components/schemas/ExchangeId'
                    subtitle:
                      type: string
                      description: Introduction of the supported features of this exchange.
                      example: Sub Account & Trading Account
                    supported_sub_wallet_ids:
                      type: array
                      description: The trading accounts(sub_wallet_ids) supported for this exchange.
                      items:
                        type: string
                      example:
                        - SPOT
                        - FUTURE
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/wallets/{wallet_id}/exchanges/subaccounts':
    parameters:
      - $ref: '#/components/parameters/walletIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_sub_accounts_by_wallet_id
      summary: List exchange sub accounts by wallet id
      description: Retrieve a list of exchange sub accounts.
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getSubAccountIdsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
    post:
      tags:
        - Wallets - Exchange Wallet
      operationId: link_sub_accounts_by_wallet_id
      summary: Link exchange sub accounts by wallet id
      description: Link exchange sub accounts.
      security:
        - CoboAuth: []
      requestBody:
        description: Request body for linking subaccounts
        content:
          application/json:
            schema:
              type: object
              properties:
                wallet_id:
                  type: string
                  description: The ID of main account wallet.
                  example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                sub_account_ids:
                  type: array
                  items:
                    type: string
                  description: The ID list of sub accounts.
                  example:
                    - f47ac10b-58cc-4372-a567-0e02b2c3d479
      responses:
        '201':
          $ref: '#/components/responses/getSubAccountIdsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  '/wallets/exchanges/{exchange_id}/subaccounts':
    parameters:
      - $ref: '#/components/parameters/exchangeIdParam'
    get:
      tags:
        - Wallets - Exchange Wallet
      operationId: list_sub_accounts_by_apikey
      summary: List exchange sub accounts by apikey
      description: Retrieve a list of exchange sub accounts.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalApikeyParam'
        - $ref: '#/components/parameters/optionalSecretParam'
        - $ref: '#/components/parameters/optionalPassphraseParam'
      responses:
        '200':
          $ref: '#/components/responses/getSubAccountIdsResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions/fee_price:
    get:
      tags:
        - Transactions
      operationId: get_chain_fee_price
      summary: 'Get the fee price data for chain and/or token(Hold, TBD after normalize fee settings)'
      description: Retrieve the fee price data.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
      responses:
        '200':
          $ref: '#/components/responses/getChainFeeResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /transactions/estimate_fee:
    post:
      tags:
        - Transactions
      operationId: estimate_fee
      summary: Estimate the fee for transaction
      description: Estimate the transaction fee.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/estimateFeeBody'
      responses:
        '200':
          $ref: '#/components/responses/estimateFeeResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
        '404':
          $ref: '#/components/responses/notFoundError'
  /transactions/transfer:
    post:
      tags:
        - Transactions
      operationId: create_transfer_transaction
      summary: Create a transfer transaction
      description: Create a transaction to transfer funds from one account to another.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createTransferBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions/call:
    post:
      tags:
        - Transactions
      operationId: create_smart_contract_call_transaction
      summary: Create a smart contract call transaction
      description: Create a transaction to call a smart contract.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createSmartContractCallBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions/sign:
    post:
      tags:
        - Transactions
      operationId: create_sign_message_transaction
      summary: Create a sign message transaction
      description: Create a transaction to sign message.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/createMessageSignBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '400':
          $ref: '#/components/responses/badRequestError'
  /transactions:
    get:
      tags:
        - Transactions
      operationId: list_transactions
      summary: List all transactions
      description: Retrieve a list of transactions.
      security:
        - CoboAuth: []
      parameters:
        - $ref: '#/components/parameters/optionalRequestIdParam'
        - $ref: '#/components/parameters/optionalCoboIdParam'
        - $ref: '#/components/parameters/optionalTxIdParam'
        - $ref: '#/components/parameters/optionalTransactionTypeParam'
        - $ref: '#/components/parameters/optionalTransactionStatusParam'
        - name: wallet_id
          in: query
          required: false
          description: Unique id of the wallet
          schema:
            type: string
            format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        - $ref: '#/components/parameters/optionalChainIdParam'
        - $ref: '#/components/parameters/optionalTokenIdParam'
        - $ref: '#/components/parameters/optionalAssetIdParam'
        - $ref: '#/components/parameters/optionalMinCreatedTimestampParam'
        - $ref: '#/components/parameters/optionalMaxCreatedTimestampParam'
        - $ref: '#/components/parameters/sortByParam'
        - $ref: '#/components/parameters/directionParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          $ref: '#/components/responses/getTransactionsResponse'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '429':
          $ref: '#/components/responses/tooManyRequestError'
  '/transactions/{transaction_id}':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    get:
      tags:
        - Transactions
      operationId: get_transaction_by_id
      summary: Get transaction information by ID
      description: Detailed description on retrieving transaction information by id
      security:
        - CoboAuth: []
      responses:
        '200':
          $ref: '#/components/responses/getTransactionByIdResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/drop':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: drop_transaction_by_id
      summary: Drop a transaction by ID
      description: Drop a transaction.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/resend':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: resend_transaction_by_id
      summary: Resend a transaction by ID
      description: Resend a transaction.
      security:
        - CoboAuth: []
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/speedup':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: speedup_transaction_by_id
      summary: Speed up a transaction by ID
      description: Speed up a transaction.
      security:
        - CoboAuth: []
      requestBody:
        $ref: '#/components/requestBodies/feeRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/transactions/{transaction_id}/double_check/retry':
    parameters:
      - $ref: '#/components/parameters/transactionIdParam'
    post:
      tags:
        - Transactions
      operationId: retry_transaction_double_check_by_id
      summary: Retry up a transaction double-check by ID
      description: Retry a transaction double-check.
      security:
        - CoboAuth: []
      responses:
        '201':
          $ref: '#/components/responses/createTransactionRequestResponse'
        '404':
          $ref: '#/components/responses/notFoundError'
  /webhooks/events/definitions:
    get:
      tags:
        - Developers - Webhooks
      summary: List all event types
      description: |
        This operation retrieves a full list of supported event types.
      operationId: list_webhook_event_definitions
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    event_type:
                      type: string
                      example: asset_wallet.outbound.created
                      description: The event type.
                    description:
                      type: string
                      example: Occurs when an Asset Wallet is created.
                      description: The event type description.
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
  /webhooks/events:
    get:
      tags:
        - Developers - Webhooks
      summary: List all events
      description: |
        This operation retrieves a list of webhook events that have occurred under your account since you set up the webhook endpoint.
      operationId: list_events
      parameters:
        - description: |
            The event status. Possible values include:
            - `Success`: The event has been delivered, and the webhook endpoint has responded to the event.
            - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event.
            - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.
          in: query
          name: status
          schema:
            $ref: '#/components/schemas/WebhookEventStatus'
          required: false
          example: Success
        - description: |
            The event type.
          in: query
          name: type
          schema:
            $ref: '#/components/schemas/WebhookEventType'
          required: false
          example: asset_wallet.outbound.created
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/beforeParam'
        - $ref: '#/components/parameters/afterParam'
      responses:
        '200':
          description: A list of webhook events has been successfully retrieved.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/WebhookEvent'
                    type: array
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
  '/webhooks/events/{event_id}':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: Retrieve event by ID
      description: |
        This operation retrieves the information of a webhook event by the event ID.
        You can retrieve all event IDs by calling `List all events`.
      operationId: get_webhook_event
      responses:
        '200':
          description: The webhook event information is successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEvent'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/webhooks/events/{event_id}/logs':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
    get:
      tags:
        - Developers - Webhooks
      summary: List event logs by ID
      description: |
        This operation retrieves a list of webhook event logs by event ID. You can retrieve all event IDs by calling `List all events`.
      operationId: get_webhook_event_logs
      responses:
        '200':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookEventLog'
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
  '/webhooks/events/{event_id}/retry':
    parameters:
      - $ref: '#/components/parameters/webhookEventIdParam'
    post:
      tags:
        - Developers - Webhooks
      summary: Retry event by ID
      description: |
        This operation retries delivering a webhook event with the specified event ID. Retry is applicable to events in the `Retrying` or `Failed` status. You can retrieve all event IDs by calling `List all events`.
      operationId: retry_webhook_event
      responses:
        '201':
          description: The request was successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  retried:
                    type: boolean
                    example: true
                    description: Whether the retry is successful.
        '400':
          $ref: '#/components/responses/badRequestError'
        '401':
          $ref: '#/components/responses/unauthorizedError'
        '403':
          $ref: '#/components/responses/forbiddenError'
        '404':
          $ref: '#/components/responses/notFoundError'
components:
  schemas:
    Pagination:
      type: object
      description: The pagination information of the returned data.
      properties:
        before:
          type: string
          example: as19
          description: 'An object ID which serves as a cursor for pagination. For example, if the value of `before` is `as19`, the returned data ends before the object with the object ID `as19`.'
        after:
          type: string
          example: 20sa
          description: 'An object ID which serves as a cursor for pagination. For example, if the value of `after` is `20sa`, the returned data starts after the object with the object ID `20sa`.'
    ErrorResponse:
      type: object
      description: The response of a failed request.
      required:
        - success
        - error_code
        - error_description
        - error_id
      properties:
        success:
          type: boolean
          default: false
          description: Whether the API operation is successful. This is always `false` for a failed request.
        error_code:
          type: integer
          description: The error code.
          example: 1000
        error_description:
          type: string
          description: The error description.
          example: API params is missing or null
        error_id:
          type: string
          description: A unique ID for the error log. You can use it for debugging purposes.
          example: 0b6ddf19083c4bd1a9ca01bec44b24dd
    AssetInfo:
      type: object
      description: The data for asset information.
      required:
        - asset_id
      properties:
        asset_id:
          type: string
          description: ID of the asset. Unique in all assets scope.
          pattern: '^[A-Z0-9]+$'
          example: USDT
        display_code:
          type: string
          description: Display code for the asset.
          pattern: '^[A-Z0-9]+$'
          example: USDT
        description:
          type: string
          description: The description of the asset.
          example: Tether USDT
        icon_url:
          type: string
          description: URL of the asset
          example: 'https://d.cobo.com/public/logos/USDT.png'
    TokenInfo:
      type: object
      description: The data for token information.
      required:
        - token_id
        - chain_id
      properties:
        token_id:
          type: string
          description: ID of the token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          pattern: '^[A-Z]+$'
          example: ETH
        symbol:
          type: string
          description: Symbol for the token.
          pattern: '^[A-Za-z0-9]+$'
          example: USDT
        description:
          type: string
          description: The description of the token.
          example: Tether USDT
        icon_url:
          type: string
          description: URL of the icon image.
          example: 'https://static.waas.co/images/coins/ETH.png'
        token_address:
          type: string
          description: 'Address for token, if applicable.'
          example: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
        asset_id:
          type: string
          description: ID of the asset. Used to group token balance when needed.
          pattern: '^[A-Z0-9]+$'
          example: USDT
    ChainInfo:
      type: object
      description: The data for chain information.
      required:
        - chain_id
      properties:
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          pattern: '^[A-Z]+$'
          example: ETH
        symbol:
          type: string
          description: Symbol for the chain.
          pattern: '^[A-Za-z0-9]+$'
          example: USDT
        icon_url:
          type: string
          description: URL of the icon image.
          example: 'https://static.waas.co/images/coins/ETH.png'
        explorer_tx_url:
          type: string
          description: URL of the explorer transaction.
          example: 'https://etherscan.io/tx/{txn_id}'
        explorer_address_url:
          type: string
          description: URL of the explorer address.
          example: 'https://etherscan.io/address/{address}'
    WalletType:
      type: string
      enum:
        - Custodial
        - MPC
        - SmartContract
        - Exchange
      example: Custodial
    WalletSubtype:
      type: string
      enum:
        - Asset
        - Web3
        - Main
        - Sub
        - Org-Controlled
        - User-Controlled
        - 'Safe{Wallet}'
      example: Asset
    SmartContractWalletType:
      type: string
      enum:
        - SafeWallet
      example: SafeWallet
      default: SafeWallet
      description: What kind of smart contract does this wallet use
    SmartContractWalletOperationType:
      type: string
      enum:
        - CoboSafe
      example: CoboSafe
      default: CoboSafe
      description: The way use to interact with the smart contract wallet.
    ExchangeId:
      type: string
      enum:
        - binance
        - okx
        - deribit
        - bybit
        - gate
      description: The exchange identifier.
      example: binance
    TokenBalance:
      type: object
      description: The data for token balance information.
      required:
        - token_id
        - balance
      properties:
        token_id:
          type: string
          description: ID of the token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        balance:
          type: object
          description: The data for balance information.
          required:
            - total
            - available
          properties:
            total:
              type: string
              description: 'The total balance, sum of the following fields.'
              example: '100.0'
            available:
              type: string
              description: The balance free to use.
              example: '80.5'
            pending:
              type: string
              description: The pending balance not confirmed.
              default: '0'
              example: '10.5'
            staked:
              type: string
              description: The staked balance.
              default: '0'
              example: '3.5'
            frozen:
              type: string
              description: The frozen balance.
              default: '0'
              example: '2.5'
            locked:
              type: string
              description: The locked balance.
              default: '0'
              example: '3.0'
    AssetBalance:
      type: object
      description: The data for token balance information.
      required:
        - asset_id
        - balance
      properties:
        asset_id:
          type: string
          description: ID of the asset. Unique in all assets scope.
          pattern: '^[A-Z0-9]+$'
          example: USDT
        balance:
          $ref: '#/components/schemas/TokenBalance/properties/balance'
    SafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/CustodialWalletInfo'
            - type: object
              properties:
                chain_id:
                  type: string
                  description: The chain the wallet is on.
                  example: ETH
                label:
                  type: string
                  description: The label of the wallet.
                  example: My Wallet
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The address of the smart contract wallet.
            owners:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: The owners of the smart contract wallet. This MUST be provided when user want to create a new safe wallet.
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: The threshold of required confirmations for the smart contract wallet. This MUST be provided when user want to create a new safe wallet.
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The address of the cobo safe module.
            initiator:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: The wallet id of the initiator. This is required when user want to create a new safe wallet.
                wallet_type:
                  type: string
                  example: MPC
                  description: The wallet type of the initiator. This is required when user want to create a new safe wallet.
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: The wallet address of the initiator. This is required when user want to create a new safe wallet.
    CustodialWalletInfo:
      type: object
      description: The data for wallet information.
      required:
        - wallet_id
        - wallet_type
        - wallet_subtype
        - name
        - org_id
      properties:
        wallet_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        wallet_type:
          $ref: '#/components/schemas/WalletType'
        wallet_subtype:
          $ref: '#/components/schemas/WalletSubtype'
        name:
          type: string
          example: Example Wallet
        org_id:
          type: string
          description: The owning custody organization id of the custodial wallet.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    MPCWalletInfo:
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - vault_id
          properties:
            vault_id:
              type: string
              description: The owning mpc vault id of the mpc wallet.
    SmartContractWalletInfo:
      oneOf:
        - $ref: '#/components/schemas/SafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/SafeWallet'
    ExchangeWalletInfo:
      allOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - type: object
          required:
            - apikey
            - exchange_id
          properties:
            apikey:
              type: string
              description: The API Key for the exchange.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            parent_wallet_id:
              type: string
              description: The parent wallet id for this wallet if presented.
              format: uuid
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
            sub_accounts:
              type: array
              items:
                type: object
                required:
                  - wallet_id
                  - account_id
                properties:
                  wallet_id:
                    type: string
                    format: uuid
                    example: f47ac10b-58cc-4372-a567-0e02b2c3d479
                  account_id:
                    type: string
                    description: 'The unique identifier associated with the exchange sub-account. It can be an email address, username, or a custom account ID.'
                    example: sub01@xx.com
    WalletInfo:
      oneOf:
        - $ref: '#/components/schemas/CustodialWalletInfo'
        - $ref: '#/components/schemas/MPCWalletInfo'
        - $ref: '#/components/schemas/SmartContractWalletInfo'
        - $ref: '#/components/schemas/ExchangeWalletInfo'
      discriminator:
        propertyName: wallet_type
        mapping:
          Custodial: '#/components/schemas/CustodialWalletInfo'
          MPC: '#/components/schemas/MPCWalletInfo'
          SmartContract: '#/components/schemas/SmartContractWalletInfo'
          Exchange: '#/components/schemas/ExchangeWalletInfo'
    BaseCreateWallet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: My WaaS 2.0 Wallet
    CreatedWallet:
      oneOf:
        - $ref: '#/components/schemas/CreateCustodialWallet'
        - $ref: '#/components/schemas/CreateExchangeWallet'
        - $ref: '#/components/schemas/CreateMpcWallet'
        - $ref: '#/components/schemas/CreateSmartContractWallet'
      discriminator:
        propertyName: type
        mapping:
          Custodial: '#/components/schemas/CreateCustodialWallet'
          MPC: '#/components/schemas/CreateMpcWallet'
          SmartContract: '#/components/schemas/CreateSmartContractWallet'
          Exchange: '#/components/schemas/CreateExchangeWallet'
    UTXO:
      type: object
      description: utxo information.
      properties:
        tx_hash:
          type: string
          description: Transaction hash of the UTXO.
          example: dd7e1cecf6bbde1844ee1815b780711a1e306a718bcd23cd64401b48ef88eb83
        vout_n:
          type: integer
          description: Output index of the UTXO.
          example: 0
        address:
          type: string
          description: Address of the UTXO.
          example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
        amount:
          type: string
          description: 'UTXO amount in decimal places (e.g. one bitcoin is divisible to eight decimal places, and 100000000 represents 1 BTC).'
          example: 100000
        is_coinbase:
          type: boolean
          description: Whether the UTXO is a coinbase transaction.
          example: false
        confirmed_number:
          type: integer
          description: Number of confirmations for the UTXO.
          example: 66716
    MaxSendValue:
      type: object
      description: max send value and fee.
      properties:
        token:
          type: string
          description: token name.
          example: ETH
        token_decimal:
          type: integer
          description: coin decimal precision.
          example: 18
        fee_token:
          type: string
          description: fee token name.
          example: ETH
        fee_decimal:
          type: integer
          description: fee coin decimal precision.
          example: 18
        max_send_value:
          type: string
          description: the maximum sendable value for the given address or current wallet.
          example: '841165119243622'
        fee_per_byte:
          type: string
          description: transaction fees per byte for UTXO model.
          example: '0'
        fee_value:
          type: string
          description: transaction fee for UTXO model
          example: '0'
        gas_price:
          type: string
          description: gas price for account model
          example: '43638776316'
        gas_limit:
          type: integer
          description: gas limit for account model
          example: 21000
    AddressInfo:
      type: object
      description: The data for address information.
      required:
        - address_id
        - address_str
        - token_id
      properties:
        address_id:
          type: string
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        address_str:
          type: string
          description: Then blockchain address
          example: '0x0000000000000000000000000000000000000000'
        token_id:
          type: string
          description: ID of the token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        memo:
          type: string
          description: From address memo
          example: '82840924'
        is_internal:
          type: boolean
          description: 'Ture if the address is in same fund pool, False otherwise'
          default: false
          example: false
    AddressEncoding:
      type: string
      enum:
        - ENCODING_P2PKH
        - ENCODING_P2SH_P2WPKH
        - ENCODING_BECH32
        - ENCODING_P2PKH_UNCOMPRESSED
        - ENCODING_P2SH_P2MS
        - ENCODING_P2SH_P2WSH_P2MS
        - ENCODING_P2TR
      description: Encoding only apply to BTC-Liked chain
      example: ENCODING_P2PKH
    CreateCustodialWallet:
      allOf:
        - $ref: '#/components/schemas/BaseCreateWallet'
        - type: object
          required:
            - wallet_type
            - wallet_subtype
          properties:
            wallet_type:
              type: string
              enum:
                - Custodial
            wallet_subtype:
              type: string
              enum:
                - Asset
                - Web3
    CreateMpcWallet:
      allOf:
        - $ref: '#/components/schemas/BaseCreateWallet'
        - type: object
          required:
            - wallet_type
            - wallet_subtype
            - vault_id
          properties:
            wallet_type:
              type: string
              enum:
                - MPC
            wallet_subtype:
              type: string
              enum:
                - Org-Controlled
                - User-Controlled
            vault_id:
              type: string
              description: The owning mpc vault id of the mpc wallet.
    CreateSmartContractWallet:
      oneOf:
        - $ref: '#/components/schemas/CreateSafeWallet'
      discriminator:
        propertyName: smart_contract_wallet_type
        mapping:
          Safe: '#/components/schemas/CreateSafeWallet'
    CreateSafeWallet:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/BaseCreateWallet'
            - type: object
              required:
                - wallet_type
                - wallet_subtype
                - chain_id
              properties:
                wallet_type:
                  type: string
                  enum:
                    - SmartContract
                wallet_subtype:
                  type: string
                  enum:
                    - 'Safe{Wallet}'
                label:
                  type: string
                  description: The label of the wallet.
                  example: ETH
                chain_id:
                  type: string
                  description: The chain id the wallet is on.
                  example: ETH
        - type: object
          required:
            - smart_contract_wallet_type
          properties:
            smart_contract_wallet_type:
              $ref: '#/components/schemas/SmartContractWalletType'
            safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: 'The address of the smart contract wallet. If this is not provided, WaaS 2.0 will create a new safe wallet and setup cobo safe module for user. In this case, threshold, owners is required.'
            owners:
              type: array
              items:
                type: string
                format: address
                pattern: '^0x[a-fA-F0-9]{40}$'
                example: '0x1234567890123456789012345678901234567890'
              description: The owners of the smart contract wallet. This MUST be provided when user want to create a new safe wallet.
            threshold:
              type: integer
              minimum: 1
              example: 2
              description: The threshold of required confirmations for the smart contract wallet. This MUST be provided when user want to create a new safe wallet.
            cobo_safe_address:
              type: string
              format: address
              pattern: '^0x[a-fA-F0-9]{40}$'
              example: '0x1234567890123456789012345678901234567890'
              description: The address of the cobo safe module. Cobo safe module must has been created & enabled when import a existing safe wallet.
            initiator:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: The wallet id of the initiator. This is required when user want to create a new safe wallet.
                wallet_type:
                  type: string
                  example: MPC
                  description: The wallet type of the initiator. This is required when user want to create a new safe wallet.
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: The wallet address of the initiator. This is required when user want to create a new safe wallet.
    CreateExchangeWallet:
      allOf:
        - $ref: '#/components/schemas/BaseCreateWallet'
        - type: object
          required:
            - wallet_type
            - wallet_subtype
            - exchange_id
            - apikey
            - secret
          properties:
            wallet_type:
              type: string
              enum:
                - Exchange
            wallet_subtype:
              type: string
              enum:
                - Main
                - Sub
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            apikey:
              type: string
              description: The API Key for the exchange.
              example: d8f062da-39f4-4a11-8b9d-12595854237f
            secret:
              type: string
              description: The API Secret for the exchange.
              example: 75B4F636193162488A3728B4A5797708
            passphrase:
              type: string
              description: The passphrase for the exchange.
              example: sXASDKWKLLsWWEE
            ga_code:
              type: string
              description: The ga_code for the exchange.
              example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
            sub_account_ids:
              type: array
              description: 'The unique identifier associated with the exchange sub-account. It can be an email address, username, or a custom account ID.'
              items:
                type: string
              example:
                - sub01@xx.com
                - sub02@xx.com
    CurveType:
      type: string
      enum:
        - SECP256K1
        - ED25519
      example: ED25519
    KeyGroup:
      type: object
      description: The data for mpc key group information.
      properties:
        id:
          type: string
          example: '880311524363903326'
          description: Unique id of the key group
        type:
          $ref: '#/components/schemas/KeyGroupType'
        tss_group_ids:
          type: array
          items:
            $ref: '#/components/schemas/TSSGroupId'
        key_holders:
          type: array
          items:
            $ref: '#/components/schemas/KeyHolder'
        node_count:
          type: integer
        threshold:
          type: integer
        status:
          $ref: '#/components/schemas/KeyGroupStatus'
    KeyGroupStatus:
      type: string
      enum:
        - New
        - Valid
        - Unavailable
      example: Valid
    KeyGroupType:
      type: string
      enum:
        - MainKeyGroup
        - SigningKeyGroup
        - RecoveryKeyGroup
      example: MainKeyGroup
    KeyHolder:
      type: object
      description: The data for mpc wallet key holder information.
      properties:
        name:
          type: string
          example: key holder name
        type:
          $ref: '#/components/schemas/KeyHolderType'
        tss_node_id:
          type: string
          description: The IDs of the tss node.
          example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
        online:
          type: boolean
          description: Indicates if the tss node online
        status:
          $ref: '#/components/schemas/KeyHolderStatus'
    KeyHolderStatus:
      type: string
      enum:
        - Valid
        - NotConfigured
        - NotActivated
        - Changed
      example: Valid
    KeyHolderType:
      type: string
      enum:
        - COBO
        - MOBILE
        - API
      example: MOBILE
    MPCVault:
      type: object
      description: The data for mpc vault information.
      properties:
        id:
          type: string
          example: YPdbyVaVGqXXjkUsohHw
          description: Unique id of the vault
        name:
          type: string
          example: my mpc vault
        type:
          $ref: '#/components/schemas/MPCVaultType'
        root_pubkeys:
          type: array
          items:
            $ref: '#/components/schemas/RootPubkey'
        create_timestamp:
          type: number
          description: The create time the vault.
    MPCVaultType:
      type: string
      enum:
        - OrgControlled
        - UserControlled
      example: OrgControlled
    MPCProject:
      type: object
      description: The data for mpc project information.
      properties:
        id:
          type: string
          example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
          description: Unique id of the project
        org_id:
          type: string
          example: f3b4a616-9c43-462e-8cb4-343e304fee64
          description: Unique id of org
        name:
          type: string
          example: my mpc project
        node_count:
          type: integer
          description: The count of tss node of the project
        threshold:
          type: integer
          description: The threshold number of project required for signature
        create_timestamp:
          type: integer
          description: The create time the vault.
    RootPubkey:
      type: object
      description: The data for root pubkey information.
      properties:
        pubkey:
          type: string
          description: the root pubkey of the mpc vault.
          example: xpub661MyMwAqRbcG4vPNi58VQJrXW8D9VzmauuRq2rTY3oUVnKGuLTxQxvvoEXgLvZ7N9GQXQkWVgKn1rzEUUEm4NdvrBKUqjpNJEnn2UL4rYq
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSGroupId:
      type: object
      description: The data for tss group id information.
      properties:
        group_id:
          type: string
          description: the group id of the tss group.
          example: mMedDioOKhTlhGyQRzMv
        curve:
          $ref: '#/components/schemas/CurveType'
    TSSRequest:
      type: object
      description: The data for mpc tss request information.
      properties:
        id:
          type: string
          description: Unique id of the tss request.
          example: YPdbyVaVGqXXjkUsohHw
        type:
          $ref: '#/components/schemas/TSSRequestType'
        status:
          $ref: '#/components/schemas/TSSRequestStatus'
    TSSRequestStatus:
      type: string
      enum:
        - PendingKeyHolderConfirmation
        - KeyHolderConfirmationFailed
        - KeyGenerating
        - KeyGeneratingFailed
        - Success
      example: Success
    TSSRequestType:
      type: string
      enum:
        - KeyGen
        - KeyGenFromKeyGroup
        - Recovery
      example: KeyGen
      description: 'The type of tss request, keygen is key generation'
    FeeType:
      type: string
      enum:
        - Fixed
        - EVM_EIP_1559
        - EVM_Legacy
        - UTXO
      example: EVM_EIP_1559
      default: EVM_EIP_1559
      description: The fee type used
    FeeAmount:
      type: object
      description: The estimated fee amount in fee_coin.
      properties:
        fee_amount:
          type: string
          description: The estimated fee amount in fee_coin.
          example: '0.1'
    FeeData:
      type: object
      description: The estimated fee amount in fee_coin.
      properties:
        gas_limit:
          type: integer
          description: The Limit of gas.
          default: 21000
        fee_amount:
          type: string
          description: The estimated fee amount in fee_coin.
          example: '0.1'
    EvmEip1559FeeBasePrice:
      type: object
      description: The base eip1559 fee price for estimate fees or transfer.
      required:
        - max_fee
        - max_priority_fee
        - base_fee
      properties:
        fee_token_id:
          type: string
          description: ID of the fee token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH
        max_fee:
          type: string
          description: 'The highest Gas price paid for the transfer, unit GWei.'
          example: '1'
        max_priority_fee:
          type: integer
          description: 'The maximum Gas price paid to miners, the higher it is, the faster it is likely to be packaged into the block, unit GWei.'
          example: '0.1'
        base_fee:
          type: integer
          description: The Base Fee of chain.
          example: '0.9'
    EvmLegacyFeeBasePrice:
      type: object
      description: The legacy fee price for estimate fees or transfer.
      required:
        - gas_price
      properties:
        fee_token_id:
          type: string
          description: ID of the fee token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        gas_price:
          type: string
          description: 'The Price of Gas, unit GWei.'
          example: '1'
    UtxoFeeBasePrice:
      type: object
      description: The legacy fee price for estimate fees or transfer.
      required:
        - fee_rate
      properties:
        fee_token_id:
          type: string
          description: ID of the fee token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH
        fee_rate:
          type: string
          description: 'The fee rate, unit sat/vB.'
          example: '50'
    EvmEip1559FeePrice:
      type: object
      description: The base eip1559 fee data for estimate fees or transfer.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
    EvmLegacyFeePrice:
      type: object
      description: The legacy fee data for estimate fees or transfer.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
    UtxoFeePrice:
      type: object
      description: The legacy fee data for estimate fees or transfer.
      required:
        - fee_type
      allOf:
        - properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
    FixedFee:
      type: object
      description: The estimated fee amount in fee_coin.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
            fee_token_id:
              type: string
              description: ID of the fee token. Unique in all chains scope.
              pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
              example: ETH_USDT
        - $ref: '#/components/schemas/FeeAmount'
    EvmEip1559Fee:
      type: object
      description: The eip1559 fee data for estimate fees or transfer.
      required:
        - fee_type
        - standard
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        standard:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        fast:
          allOf:
            - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
    EvmLegacyFee:
      type: object
      description: The legacy fee data for estimate fees or transfer.
      required:
        - fee_type
        - standard
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        standard:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
        fast:
          allOf:
            - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
            - $ref: '#/components/schemas/FeeData'
    UtxoFee:
      type: object
      description: The UTXO fee for transfer.
      required:
        - fee_type
        - standard
      properties:
        fee_type:
          $ref: '#/components/schemas/FeeType'
        slow:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        standard:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
        fast:
          allOf:
            - $ref: '#/components/schemas/UtxoFeeBasePrice'
            - $ref: '#/components/schemas/FeeAmount'
    ChainFeePrice:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559FeePrice'
        - $ref: '#/components/schemas/EvmLegacyFeePrice'
        - $ref: '#/components/schemas/UtxoFeePrice'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559FeePrice'
          EVM_Legacy: '#/components/schemas/EvmLegacyFeePrice'
          UTXO: '#/components/schemas/UtxoFeePrice'
          Fixed: '#/components/schemas/FixedFee'
    EstimationFee:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559Fee'
        - $ref: '#/components/schemas/EvmLegacyFee'
        - $ref: '#/components/schemas/UtxoFee'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          Fixed: '#/components/schemas/FixedFee'
          EVM_EIP_1559: '#/components/schemas/EvmEip1559Fee'
          EVM_Legacy: '#/components/schemas/EvmLegacyFee'
          UTXO: '#/components/schemas/UtxoFee'
    EvmEip1559TransactionFee:
      type: object
      description: The fee data for transaction.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmEip1559FeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    EvmLegacyTransactionFee:
      type: object
      description: The fee data for transaction.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/EvmLegacyFeeBasePrice'
        - $ref: '#/components/schemas/FeeData'
    UtxoTransactionFee:
      type: object
      description: The fee data for transaction.
      required:
        - fee_type
      allOf:
        - type: object
          properties:
            fee_type:
              $ref: '#/components/schemas/FeeType'
        - $ref: '#/components/schemas/UtxoFeeBasePrice'
        - $ref: '#/components/schemas/FeeAmount'
    TransactionFee:
      oneOf:
        - $ref: '#/components/schemas/EvmEip1559TransactionFee'
        - $ref: '#/components/schemas/EvmLegacyTransactionFee'
        - $ref: '#/components/schemas/UtxoTransactionFee'
        - $ref: '#/components/schemas/FixedFee'
      discriminator:
        propertyName: fee_type
        mapping:
          EVM_EIP_1559: '#/components/schemas/EvmEip1559TransactionFee'
          EVM_Legacy: '#/components/schemas/EvmLegacyTransactionFee'
          UTXO: '#/components/schemas/UtxoTransactionFee'
          Fixed: '#/components/schemas/FixedFee'
    Transaction:
      type: object
      description: The data for transaction information.
      required:
        - transaction_id
        - wallet_id
        - cobo_id
        - status
        - type
        - source
        - destination
        - created_time
      properties:
        transaction_id:
          type: string
          description: Unique transaction ID
          format: uuid
          example: aff0e1cb-15b2-4e1f-9b9d-a9133715986f
        wallet_id:
          type: string
          description: Wallet ID
          example: 624ce4e5-e985-4394-a196-fd7752aff96e
        request_id:
          type: string
          description: Request ID
          example: web_send_by_user_327_1610444045047
        cobo_id:
          type: string
          description: Cobo ID
          example: '20231213122855000000000000000000'
        tx_id:
          type: string
          description: Transaction hash.
          example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
        status:
          $ref: '#/components/schemas/TransactionStatus'
        sub_status:
          $ref: '#/components/schemas/TransactionSubStatus'
        type:
          $ref: '#/components/schemas/TransactionType'
        source:
          oneOf:
            - $ref: '#/components/schemas/BaseTransactionAddress'
            - $ref: '#/components/schemas/BaseWalletTransactionAddress'
            - $ref: '#/components/schemas/MPCWalletTransactionAddress'
            - $ref: '#/components/schemas/SafeTransactionAddress'
            - $ref: '#/components/schemas/ExchangeWalletTransactionAddress'
          discriminator:
            propertyName: type
            mapping:
              ExternalAddress: '#/components/schemas/BaseTransactionAddress'
              GasStation: '#/components/schemas/BaseWalletTransactionAddress'
              CustodialAssetWallet: '#/components/schemas/BaseWalletTransactionAddress'
              CustodialWeb3Wallet: '#/components/schemas/BaseWalletTransactionAddress'
              MPCClientControlledWallet: '#/components/schemas/MPCWalletTransactionAddress'
              MPCUserControlledWallet: '#/components/schemas/MPCWalletTransactionAddress'
              SafeContractWallet: '#/components/schemas/SafeWalletTransactionAddress'
              ExchangeAccount: '#/components/schemas/ExchangeWalletTransactionAddress'
        destination:
          oneOf:
            - $ref: '#/components/schemas/BaseTransactionAddress'
            - $ref: '#/components/schemas/BaseWalletTransactionAddress'
            - $ref: '#/components/schemas/ExchangeWalletTransactionAddress'
          discriminator:
            propertyName: source_type
            mapping:
              ExternalAddress: '#/components/schemas/BaseTransactionAddress'
              GasStation: '#/components/schemas/BaseWalletTransactionAddress'
              CustodialAssetWallet: '#/components/schemas/BaseWalletTransactionAddress'
              CustodialWeb3Wallet: '#/components/schemas/BaseWalletTransactionAddress'
              MPCClientControlledWallet: '#/components/schemas/BaseWalletTransactionAddress'
              MPCUserControlledWallet: '#/components/schemas/BaseWalletTransactionAddress'
              SafeContractWallet: '#/components/schemas/BaseWalletTransactionAddress'
              ExchangeAccount: '#/components/schemas/ExchangeWalletTransactionAddress'
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          pattern: '^[A-Z]+$'
          example: ETH
        exchange_id:
          $ref: '#/components/schemas/ExchangeId'
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TransactionToken'
        category:
          type: array
          items:
            $ref: '#/components/schemas/TransactionCategory'
        description:
          type: string
          example: withdrawal to exchange trading account
        created_time:
          type: number
          description: Transaction creation time
          example: 1610445878970
        updated_time:
          type: number
          description: Transaction update time
          example: 1610445878970
    TransactionApprover:
      type: object
      description: The approver data for transaction.
      properties:
        name:
          type: string
          description: The approver name of the transaction.
          example: 'Approver #1'
        status:
          type: string
          description: The approval status.
          enum:
            - Pending
            - Approved
            - Rejected
          example: Pending
    TransactionToken:
      type: object
      description: The data for transaction asset information.
      required:
        - asset_id
        - amount
      properties:
        token_id:
          type: string
          description: ID of the token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        asset_id:
          type: string
          description: ID of the asset. Used to group token balance when needed.
          pattern: '^[A-Z0-9]+$'
          example: USDT
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
          format: float
          example: '1.5'
    TransactionCategory:
      type: string
      description: Transaction category
      example: Payment
    TransactionDetails:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            initiator:
              type: string
              description: Transaction initiator
              example: 'API Prod Key #1'
            approvers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionApprover'
            signers:
              type: array
              items:
                $ref: '#/components/schemas/TransactionSigner'
            nonce:
              type: integer
              description: Transaction nonce
              example: 9
            replaced_by:
              type: string
              description: Replace by transaction hash
              example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
            fee:
              $ref: '#/components/schemas/TransactionFee'
            fueled_by:
              type: string
              description: Fueled by address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
            confirmed_num:
              type: number
              description: Transaction confirmed number
              example: 12
            confirming_threshold:
              type: integer
              format: int32
              description: 'Number of confirmations required for a transaction, such as 15 for ETH chain.'
              example: 15
            token_approval:
              $ref: '#/components/schemas/TransactionTokeApproval'
            message:
              type: string
              description: Transaction raw message
              example: this to certify that am owner this wallet address
            algorithm:
              type: string
              description: Transaction message signing algorithm
            timeline:
              type: array
              items:
                $ref: '#/components/schemas/TransactionTimeline'
    TransactionInitiatorType:
      type: string
      enum:
        - API
        - Web
        - External
      example: API
      description: Enumeration representing the initiator type of a transaction.
    TransactionSigner:
      type: object
      description: The signer data for transaction.
      properties:
        signer:
          type: string
          description: The signer name of the transaction.
          example: Cobo TSS
        status:
          type: string
          description: The signing status.
          enum:
            - Pending
            - Signed
            - Timeout
            - Rejected
          example: Signed
        failed_reason:
          type: string
          description: Failed reason of signing process.
          example: Rejected by signer Cobo TSS
    TransactionStatus:
      type: string
      enum:
        - Submitted
        - PendingScreening
        - PendingAuthorization
        - Queued
        - PendingSignature
        - Broadcasting
        - Confirming
        - Completed
        - Failed
        - Rejected
      example: Submitted
      description: Enumeration representing the status of a transaction.
    TransactionSubStatus:
      type: string
      enum:
        - RejectedKYT
        - RejectedTravelRule
        - PendingDoubleCheck
        - PendingSpenderCheck
        - PendingRiskControlCheck
        - PendingApproverCheck
        - RejectedCoboCheck
        - RejectedWhiteList
        - RejectedDoubleCheck
        - RejectedSpenderAuth
        - RejectedRiskControlCheck
        - RejectedApproverAuth
        - PendingWaitSigner
        - FailedBySigner
        - FailedBroadcasting
      example: PendingDoubleCheck
      description: Enumeration representing the sub-status of a transaction.
    TransactionTimeline:
      type: object
      description: The data for transaction timeline information.
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        finished:
          type: boolean
          description: Whether the timeline status finished
          example: true
        finished_time:
          type: number
          description: Timeline status finished time
          example: 1610445878970
    TransactionTokeApproval:
      allOf:
        - $ref: '#/components/schemas/TokenInfo'
        - type: object
          description: The data for transaction token approval information.
          properties:
            amount:
              type: number
              description: |
                Transaction value (Note that this is an absolute value. If you trade 1.5 BTC, then the value is 1.5)
              format: float
              example: 1.5
            spender:
              type: string
              description: Spender address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    TransactionType:
      type: string
      enum:
        - Deposit
        - Withdrawal
        - TokenApproval
        - ContractCall
        - AutoFueling
        - RawMessage
      example: Deposit
      description: Enumeration representing the type of a transaction.
    MpcSigningGroup:
      type: object
      description: The data for mpc signing key group.
      properties:
        used_key_group_id:
          type: string
          description: Unique id of the using key group.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        used_node_ids:
          type: array
          items:
            type: string
            example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
            description: 'The IDs of the tss node participating in the signing. If it is empty, all nodes in the signing key group will participate in the signature.'
    TransactionAddressType:
      type: string
      enum:
        - CustodialAssetWallet
        - CustodialWeb3Wallet
        - MPCClientControlledWallet
        - MPCUserControlledWallet
        - SafeContractWallet
        - ExchangeAccount
        - GasStation
        - ExternalAddress
      example: CustodialAssetWallet
      description: Enumeration representing the address type of a transaction.
    BaseTransactionAddress:
      type: object
      description: The data for transaction source information.
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/TransactionAddressType'
        address:
          type: string
          description: Address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: Address memo
          example: '82840924'
    SafeTransactionAddress:
      allOf:
        - type: object
          required:
            - delegate
          properties:
            delegate:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: The wallet id of the delegate.
                wallet_type:
                  type: string
                  example: MPC
                  description: The wallet type of the delegate. This is required when user initiate a transfer.
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: The wallet address of the delegate. This is required when user initiate a transfer.
        - $ref: '#/components/schemas/BaseTransactionAddress'
    BaseWalletTransactionAddress:
      allOf:
        - $ref: '#/components/schemas/BaseTransactionAddress'
        - type: object
          required:
            - wallet_id
          properties:
            wallet_id:
              type: string
              description: Unique id of the wallet.
              example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    MPCWalletTransactionAddress:
      allOf:
        - type: object
          properties:
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
        - $ref: '#/components/schemas/BaseWalletTransactionAddress'
    ExchangeWalletTransactionAddress:
      allOf:
        - $ref: '#/components/schemas/BaseWalletTransactionAddress'
        - type: object
          required:
            - exchange_id
          properties:
            exchange_id:
              $ref: '#/components/schemas/ExchangeId'
            sub_wallet_id:
              type: string
              description: Exchange trading account or any sub wallet info for transfer.
              example: Asset
    BaseTransferSource:
      type: object
      description: The base data for transfer source.
      required:
        - source_type
        - wallet_id
      properties:
        source_type:
          $ref: '#/components/schemas/WalletSubtype'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    AddressTransferSource:
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          required:
            - address_str
          properties:
            address_str:
              type: string
              description: From address
              example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
    MpcTransferSource:
      allOf:
        - type: object
          properties:
            mpc_used_key_group:
              $ref: '#/components/schemas/MpcSigningGroup'
        - $ref: '#/components/schemas/AddressTransferSource'
    SafeTransferSource:
      allOf:
        - $ref: '#/components/schemas/AddressTransferSource'
        - type: object
          required:
            - delegate
          properties:
            delegate:
              type: object
              properties:
                wallet_id:
                  type: string
                  format: uuid
                  example: 123e4567-e89b-12d3-a456-426614174000
                  description: The wallet id of the delegate. This is required when user initiate a transfer.
                wallet_type:
                  type: string
                  example: MPC
                  description: The wallet type of the delegate. This is required when user initiate a transfer.
                wallet_address:
                  type: string
                  example: '0x1234567890123456789012345678901234567890'
                  description: The wallet address of the delegate. This is required when user initiate a transfer.
    ExchangeTransferSource:
      allOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - type: object
          required:
            - sub_wallet_id
          properties:
            sub_wallet_id:
              type: string
              description: Exchange trading account or any sub wallet info for transfer.
              example: Asset
    TransferSource:
      oneOf:
        - $ref: '#/components/schemas/BaseTransferSource'
        - $ref: '#/components/schemas/MpcTransferSource'
        - $ref: '#/components/schemas/SafeTransferSource'
        - $ref: '#/components/schemas/ExchangeTransferSource'
      discriminator:
        propertyName: source_type
        mapping:
          Asset: '#/components/schemas/BaseTransferSource'
          Org-Controlled: '#/components/schemas/MpcTransferSource'
          User-Controlled: '#/components/schemas/MpcTransferSource'
          'Safe{Wallet}': '#/components/schemas/SafeTransferSource'
          Main: '#/components/schemas/ExchangeTransferSource'
          Sub: '#/components/schemas/ExchangeTransferSource'
    AddressTransferDestination:
      type: object
      description: The data for address destination.
      required:
        - destination_type
        - address_str
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        address_str:
          type: string
          description: Destination address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        memo:
          type: string
          description: Destination address memo
          example: '82840924'
    ExchangeTransferDestination:
      type: object
      description: The data for exchange destination.
      required:
        - destination_type
        - wallet_id
        - sub_wallet_id
      properties:
        destination_type:
          $ref: '#/components/schemas/TransferDestinationType'
        wallet_id:
          type: string
          description: Unique id of the wallet to transfer to.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        sub_wallet_id:
          type: string
          description: Exchange trading account or any sub wallet info for transfer.
          example: Asset
    TransferDestinationType:
      type: string
      enum:
        - Address
        - Exchange
      example: Address
    TransferDestination:
      oneOf:
        - $ref: '#/components/schemas/AddressTransferDestination'
        - $ref: '#/components/schemas/ExchangeTransferDestination'
      discriminator:
        propertyName: destination_type
        mapping:
          Address: '#/components/schemas/AddressTransferDestination'
          Exchange: '#/components/schemas/ExchangeTransferDestination'
    Transfer:
      type: object
      description: The base data for transfer transaction.
      required:
        - request_id
        - request_type
        - source
        - token_id
        - amount
        - destination
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          type: string
          enum:
            - Transfer
            - Call
            - Sign
          example: Transfer
        source:
          $ref: '#/components/schemas/TransferSource'
        token_id:
          type: string
          description: ID of the token. Unique in all chains scope.
          pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
          example: ETH_USDT
        amount:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: '1.5'
        destination:
          $ref: '#/components/schemas/TransferDestination'
        category_names:
          type: array
          description: The category names for transfer.
          items:
            type: string
            example: Trading
        description:
          type: string
          description: The description for transfer.
          example: Transfer from wallet
        fee:
          $ref: '#/components/schemas/TransactionFee'
    SmartContractCall:
      type: object
      description: The data for create smart contract call transaction.
      required:
        - request_id
        - request_type
        - from_wallet_id
        - from_address_str
        - chain_id
        - to_address_str
        - calldata
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/Transfer/properties/request_type'
        from_wallet_id:
          type: string
          description: Unique id of the wallet to transfer from.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        from_address_str:
          type: string
          description: From address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          pattern: '^[A-Z]+$'
          example: ETH
        to_address_str:
          type: string
          description: To address
          example: bc1q0qfzuge7vr5s2xkczrjkccmxemlyyn8mhx298v
        value:
          type: string
          description: |
            Transaction value (Note that this is an absolute value. If you trade 1.5 ETH, then the value is 1.5)
          example: '1.5'
        calldata:
          type: string
          description: |
            calldata for this transaction. Commonly used as part of contract interaction.
          format: byte
          example: U3dhZ2dlciByb2Nrcw==
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
        fee:
          $ref: '#/components/schemas/TransactionFee'
    SignMessage:
      type: object
      description: The data for create a message-signing transaction.
      required:
        - request_id
        - request_type
        - signing_wallet_id
        - signing_address
        - chain_id
      properties:
        request_id:
          type: string
          description: Unique id of the request.
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        request_type:
          $ref: '#/components/schemas/Transfer/properties/request_type'
        from_wallet_id:
          type: string
          description: Unique id of the wallet to sign message.
          format: uuid
          example: f47ac10b-58cc-4372-a567-0e02b2c3d479
        from_address_str:
          type: string
          description: signing address
          example: 19AR6YWEGbSoY8UT9Ksy9WrmrZPD5sL4Ku
        chain_id:
          type: string
          description: The blockchain on which the token operates.
          pattern: '^[A-Z]+$'
          example: ETH
        message:
          type: string
          description: 'Raw data to be signed, Base 64 encoded'
          example: YWFhYQ==
        structured_data:
          type: string
          description: 'Structured data to be signed, JSON encoded'
          example: |
            {\"types\":{\"EIP712Domain\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"string\"},{\"name\":\"chainId\",\"type\":\"uint256\"},{\"name\":\"verifyingContract\",\"type\":\"address\"}]}}
        mpc_used_key_group:
          $ref: '#/components/schemas/MpcSigningGroup'
    EstimateFee:
      oneOf:
        - $ref: '#/components/schemas/Transfer'
        - $ref: '#/components/schemas/SmartContractCall'
      discriminator:
        propertyName: request_type
        mapping:
          Transfer: '#/components/schemas/Transfer'
          Call: '#/components/schemas/SmartContractCall'
    WebhookEvent:
      type: object
      description: The information relating to the webhook event.
      required:
        - id
        - url
        - created_timestamp
        - type
        - data
        - status
      properties:
        id:
          description: The unique identifier of a webhook event.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        url:
          description: The URL of the webhook endpoint.
          maxLength: 500
          type: string
          format: url
          example: 'https://example.com/webhook'
        created_timestamp:
          description: 'The time when the event occurred, in Unix timestamp format, measured in milliseconds.'
          type: integer
          example: 1701396866000
        type:
          $ref: '#/components/schemas/WebhookEventType'
        data:
          type: object
          description: 'The data of the webhook event, in JSON format.'
          example:
            wallet_id: 624ce4e5-e985-4394-a196-fd7752aff96e
            address: '0xdAC17F958D2ee523a2206206994597C13D831ec7'
            amount: '1000000000000000000'
        status:
          $ref: '#/components/schemas/WebhookEventStatus'
        next_retry_timestamp:
          description: |
            The timestamp indicating the next scheduled retry for delivering this event, in Unix timestamp format, measured in milliseconds. This field is only present if the event status is `Retrying`.
          type: integer
          example: 1701396866000
        retries_left:
          description: The number of retries left. This field is only present if the event status is `Retrying`.
          type: integer
          example: 3
    WebhookEventType:
      type: string
      enum:
        - asset_wallet.outbound.created
        - asset_wallet.outbound.pending_authorization
        - asset_wallet.outbound.rejected
        - asset_wallet.outbound.queued
        - asset_wallet.outbound.pending_confirm
        - asset_wallet.outbound.confirmations.updated
        - asset_wallet.outbound.confirmed
        - asset_wallet.outbound.failed
        - asset_wallet.inbound.pending_confirm
        - asset_wallet.inbound.confirmed
        - asset_wallet.inbound.confirmations.updated
        - web3_wallet.outbound.created
        - web3_wallet.outbound.pending_authorization
        - web3_wallet.outbound.rejected
        - web3_wallet.outbound.queued
        - web3_wallet.outbound.pending_confirm
        - web3_wallet.outbound.confirmations.updated
        - web3_wallet.outbound.confirmed
        - web3_wallet.outbound.failed
        - web3_wallet.inbound.pending_confirm
        - web3_wallet.inbound.confirmed
        - web3_wallet.inbound.confirmations.updated
        - safe_wallet.outbound.created
        - safe_wallet.outbound.pending_authorization
        - safe_wallet.outbound.rejected
        - safe_wallet.outbound.queued
        - safe_wallet.outbound.pending_signature
        - safe_wallet.outbound.pending_confirm
        - safe_wallet.outbound.confirmations.updated
        - safe_wallet.outbound.confirmed
        - safe_wallet.outbound.failed
        - safe_wallet.inbound.pending_confirm
        - safe_wallet.inbound.confirmed
        - safe_wallet.inbound.confirmations.updated
        - exchange_wallet.inbound.pending_confirm
        - exchange_wallet.inbound.confirmed
        - exchange_wallet.outbound.created
        - exchange_wallet.outbound.pending_authorization
        - exchange_wallet.outbound.rejected
        - exchange_wallet.outbound.pending_confirm
        - exchange_wallet.outbound.confirmed
        - exchange_wallet.outbound.failed
        - exchange_wallet.sub_transfer.created
        - exchange_wallet.sub_transfer.pending_authorization
        - exchange_wallet.sub_transfer.rejected
        - exchange_wallet.sub_transfer.pending_confirm
        - exchange_wallet.sub_transfer.confirmed
        - exchange_wallet.sub_transfer.failed
        - organization_controlled_wallet.outbound.created
        - organization_controlled_wallet.outbound.pending_authorization
        - organization_controlled_wallet.outbound.rejected
        - organization_controlled_wallet.outbound.queued
        - organization_controlled_wallet.outbound.pending_signature
        - organization_controlled_wallet.outbound.pending_confirm
        - organization_controlled_wallet.outbound.confirmations.updated
        - organization_controlled_wallet.outbound.confirmed
        - organization_controlled_wallet.outbound.failed
        - organization_controlled_wallet.inbound.pending_confirm
        - organization_controlled_wallet.inbound.confirmed
        - organization_controlled_wallet.inbound.confirmations.updated
        - user_controlled_wallet.outbound.created
        - user_controlled_wallet.outbound.pending_authorization
        - user_controlled_wallet.outbound.rejected
        - user_controlled_wallet.outbound.queued
        - user_controlled_wallet.outbound.pending_signature
        - user_controlled_wallet.outbound.pending_confirm
        - user_controlled_wallet.outbound.confirmations.updated
        - user_controlled_wallet.outbound.confirmed
        - user_controlled_wallet.outbound.failed
        - user_controlled_wallet.inbound.pending_confirm
        - user_controlled_wallet.inbound.confirmed
        - user_controlled_wallet.inbound.confirmations.updated
      example: asset_wallet.outbound.created
      description: The event type.
    WebhookEventStatus:
      type: string
      enum:
        - Success
        - Retrying
        - Failed
      example: Success
      description: 'The event status. Possible values include: - `Success`: The event has been delivered, and the webhook endpoint has responded to the event. - `Retrying`: The event has been delivered, but the webhook endpoint has not responded. In this case, Cobo will retry delivering the event. - `Failed`: The event cannot be delivered and Cobo will stop retrying. This may occur if the number of retries reaches 10, or if the event has been delivered but the webhook endpoint responded with an error.'
    WebhookEventLog:
      type: object
      description: The webhook event log.
      required:
        - id
        - created_timestamp
        - status
        - request_headers
        - request_body
        - success
      properties:
        id:
          description: The unique identifier of the event log.
          type: string
          format: uuid
          example: 8f2e919a-6a7b-4a9b-8c1a-4c0b3f5b8b1f
        created_timestamp:
          description: 'The time when the event occurred, in Unix timestamp format, measured in milliseconds.'
          type: integer
          example: 1701396866000
        request_headers:
          type: object
          description: The request headers of the webhook event.
          example: '{"Content-Type": "application/json"}'
        request_body:
          $ref: '#/components/schemas/WebhookEvent'
        response_body:
          type: object
          description: The response body of the webhook event.
        response_status_code:
          type: integer
          description: The response status code of the webhook event.
          example: 200
        response_time:
          type: integer
          description: 'The response time of the webhook event, in milliseconds.'
          example: 100
        success:
          type: boolean
          description: Whether the webhook event has been successfully delivered.
          example: true
        failure_reason:
          type: string
          description: The reason why the webhook event fails to be delivered.
          example: The webhook endpoint is not reachable.
  parameters:
    sortByParam:
      name: sort_by
      in: query
      description: Field of sort by
      required: false
      schema:
        type: string
        default: ''
      example: timestamp
    directionParam:
      name: direction
      in: query
      description: Direction to sort by
      required: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
        default: ''
      example: ASC
    limitParam:
      name: limit
      in: query
      description: 'The maximum number of objects to return. The value range is [1, 50].'
      required: false
      schema:
        type: integer
        format: int32
        default: 10
        minimum: 1
        maximum: 50
      example: 10
    beforeParam:
      name: before
      in: query
      description: |-
        An object ID which serves as a cursor for pagination. For example, if you specify `before` as `as19`, the request will retrieve a list of data objects that end before the object with the object ID `as19`. You can set this parameter to the value of `pagination.after` in the response of the previous request.
        You can set either `after` or `before`, not both.
      required: false
      schema:
        type: string
        default: ''
      example: as19
    afterParam:
      name: after
      in: query
      description: |-
        An object ID which serves as a cursor for pagination. For example, if you specify `after` as `20sa`, the request will retrieve a list of data objects that start after the object with the object ID `20sa`. You can set this parameter to the value of `pagination.before` in the response of the previous request.
        You can set either `after` or `before`, not both.
      required: false
      schema:
        type: string
        default: ''
      example: 20sa
    optionalAssetIdParam:
      name: asset_id
      in: query
      required: false
      description: Unique id of the asset
      schema:
        type: string
      example: USDT
    requiredAssetIdParam:
      name: asset_id
      in: query
      required: true
      description: Unique id of the asset
      schema:
        type: string
      example: USDT
    optionalChainIdParam:
      name: chain_id
      in: query
      required: false
      description: Unique id of the chain
      schema:
        type: string
      example: ETH
    optionalTokenIdParam:
      name: token_id
      in: query
      required: false
      description: Unique id of the token
      schema:
        type: string
      example: ETH_USDT
    requiredTokenIdParam:
      name: token_id
      in: query
      required: true
      description: Unique id of the token
      schema:
        type: string
      example: ETH_USDT
    requiredWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: true
      description: Wallet subtype to query
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    optionalWalletTypeParam:
      name: wallet_type
      in: query
      required: false
      description: Wallet type to query
      schema:
        $ref: '#/components/schemas/WalletType'
    optionalWalletSubtypeParam:
      name: wallet_subtype
      in: query
      required: false
      description: Wallet subtype to query
      schema:
        $ref: '#/components/schemas/WalletSubtype'
    walletIdParam:
      name: wallet_id
      in: path
      required: true
      description: Unique id of the wallet
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    addressIdParam:
      name: address_id
      in: path
      required: true
      description: Unique id of the address
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredAddressStrParam:
      name: address_str
      in: query
      required: true
      description: The address string
      schema:
        type: string
        description: Then blockchain address
      example: '0x0000000000000000000000000000000000000000'
    requiredSubWalletIdParam:
      name: sub_wallet_id
      in: query
      required: true
      description: Unique id of the wallet
      schema:
        type: string
      example: SPOT
    addressStrParam:
      name: address_str
      in: query
      required: false
      description: address
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    toAddressStrParam:
      name: to_address
      in: query
      required: true
      description: address
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    fromAddressStrParam:
      name: from_address
      in: query
      required: false
      description: address
      schema:
        type: string
      example: 2N2xFZtbCFB6Nb3Pj9Sxsx5mX2fxX3yEgkE
    keyGroupIdParam:
      name: key_group_id
      in: path
      required: true
      description: Unique id of the tss group
      schema:
        type: string
      example: '880311524363903326'
    optionalKeyGroupTypeParam:
      name: key_group_type
      in: query
      description: The type of key group.
      required: false
      schema:
        $ref: '#/components/schemas/KeyGroupType'
    projectIdParam:
      name: project_id
      in: path
      required: true
      description: Unique id of the mpc project
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalTargetKeyGroupIDParam:
      name: target_key_group_id
      in: query
      description: The target key group id of tss request.
      required: false
      schema:
        type: string
      example: '880311524363903326'
    requiredTssRequestActionParam:
      name: tss_request_action
      in: query
      description: The action of tss request.
      required: true
      schema:
        type: string
        description: the action of tss request.
        enum:
          - cancel
        example: cancel
    tssRequestIdParam:
      name: tss_request_id
      in: path
      required: true
      description: Unique id of the tss request
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    requiredUpdateKeyGroupActionParam:
      name: update_key_group_action
      in: query
      description: The action of update key group
      required: true
      schema:
        type: string
        description: the action of tss request.
        enum:
          - UpgradeToMainKeyGroup
        example: UpgradeToMainKeyGroup
    vaultIdParam:
      name: vault_id
      in: path
      required: true
      description: Unique id of the mpc vault
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultIdQueryParam:
      name: vault_id
      in: query
      required: false
      description: Unique id of the mpc vault
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    optionalVaultNameParam:
      name: vault_name
      in: query
      required: false
      description: Unique id of the mpc vault
      schema:
        type: string
      example: my vault name
    exchangeIdParam:
      name: exchange_id
      in: path
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalExchangeIdParam:
      name: exchange_id
      in: query
      required: false
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    requiredExchangeIdParam:
      name: exchange_id
      in: query
      required: true
      description: Exchange ID to query
      schema:
        $ref: '#/components/schemas/ExchangeId'
    optionalApikeyParam:
      name: apikey
      in: query
      description: The API Key for the exchange
      required: false
      schema:
        type: string
      example: d8f062da-39f4-4a11-8b9d-12595854237f
    optionalSecretParam:
      name: secret
      in: query
      description: The API Secret for the exchange.
      required: false
      schema:
        type: string
      example: 75B4F636193162488A3728B4A5797708
    optionalPassphraseParam:
      name: passphrase
      in: query
      description: The API passphrase for the exchange wallet.
      required: false
      schema:
        type: string
      example: A3DBHJV
    optionalRequestIdParam:
      name: request_id
      in: query
      required: false
      description: Request ID
      schema:
        type: string
      example: web_send_by_user_327_1610444045047
    optionalCoboIdParam:
      name: cobo_id
      in: query
      required: false
      description: Cobo ID
      schema:
        type: string
      example: '20231213122855000000000000000000'
    optionalTxIdParam:
      name: tx_id
      in: query
      required: false
      description: Transaction hash
      schema:
        type: string
      example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
    optionalTransactionTypeParam:
      name: type
      in: query
      required: false
      description: The type of a transaction
      schema:
        $ref: '#/components/schemas/TransactionType'
    optionalTransactionStatusParam:
      name: status
      in: query
      required: false
      description: The status of a transaction
      schema:
        $ref: '#/components/schemas/TransactionStatus'
    optionalMinCreatedTimestampParam:
      name: min_created_timestamp
      in: query
      required: false
      description: The minimum transaction creation timestamp in Unix epoch seconds
      schema:
        type: integer
      example: 1635744000
    optionalMaxCreatedTimestampParam:
      name: min_created_timestamp
      in: query
      required: false
      description: The maximum transaction creation timestamp in Unix epoch seconds
      schema:
        type: integer
      example: 1635744000
    transactionIdParam:
      name: transaction_id
      in: path
      required: true
      description: Unique id of the transaction
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
    webhookEventIdParam:
      name: event_id
      in: path
      required: true
      description: The unique identifier of a webhook event. You can get a list of event IDs by calling `List all events`.
      schema:
        type: string
        format: uuid
      example: f47ac10b-58cc-4372-a567-0e02b2c3d479
  requestBodies:
    createWalletBody:
      description: The request body to create a wallet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedWallet'
    UpdateWalletBody:
      description: The request body to update a wallet
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: Example Wallet
              apikey:
                type: string
                description: The API Key for the exchange.
                example: d8f062da-39f4-4a11-8b9d-12595854237f
              secret:
                type: string
                description: The API Secret for the exchange.
                example: 75B4F636193162488A3728B4A5797708
              passphrase:
                type: string
                description: The passphrase for the exchange.
                example: sXASDKWKLLsWWEE
              ga_code:
                type: string
                description: The ga_code for the exchange.
                example: sXASDKWKLLsWWEE75B4F636193162488A3728B4A5797708
              sub_account_ids:
                type: array
                description: 'The unique identifier associated with the exchange sub-account. It can be an email address, username, or a custom account ID.'
                items:
                  type: string
                example:
                  - sub01@xx.com
                  - sub02@xx.com
    createAddressBody:
      description: The request body to add address for a wallet
      content:
        application/json:
          schema:
            type: object
            required:
              - token_id
              - count
            properties:
              token_id:
                type: string
                description: ID of the token. Unique in all chains scope.
                pattern: '^[A-Z]+(_[A-Z0-9]+)?$'
                example: ETH_USDT
              count:
                type: integer
                maximum: 50
                minimum: 1
                default: 1
                description: The number of addresses that need to be created
                example: 1
              encoding:
                $ref: '#/components/schemas/AddressEncoding'
    createKeyGroupBody:
      description: The request body to create a mpc key group
      content:
        application/json:
          schema:
            type: object
            required:
              - group_type
              - node_count
              - threshold
              - key_holders
            properties:
              group_type:
                $ref: '#/components/schemas/KeyGroupType'
              node_count:
                type: integer
                description: The count of tss node of the key group
              threshold:
                type: integer
                description: The threshold number of tss node required for signature
              key_holders:
                type: array
                items:
                  type: object
                  description: 'When creating MainKeyGroup and SigningKeyGroup, the cobo key holder will be added automatically'
                  properties:
                    name:
                      type: string
                      example: key holder name
                    type:
                      $ref: '#/components/schemas/KeyHolderType'
                    tss_node_id:
                      type: string
                      description: The ID of the tss node.
                      example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
    createMpcProjectBody:
      description: The request body to create a mpc project
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - node_count
              - threshold
            properties:
              name:
                type: string
                example: My mpc project name
                description: The name of the mpc project.
              node_count:
                type: integer
                description: Number of tss nodes in the key group
              threshold:
                type: integer
                description: The threshold number of tss node required for signature
    createTssRequestBody:
      description: The request body to create a tss request
      content:
        application/json:
          schema:
            type: object
            required:
              - type
              - target_key_group_id
            properties:
              type:
                $ref: '#/components/schemas/TSSRequestType'
              target_key_group_id:
                type: string
              used_key_group_id:
                type: string
              detail_params:
                description: 'for KeyGen request, this parameters can be null'
                type: object
                properties:
                  used_node_ids:
                    type: array
                    items:
                      type: string
                      example: cobo5yb7BNEBwwp5XXedbhnzQfvQtp132W4dH4Jz4x4eDp4KA
                      description: The IDs of the tss node participating in the reshare tss request
    createMpcVaultBody:
      description: The request body to create a mpc vault
      content:
        application/json:
          schema:
            type: object
            required:
              - name
              - vault_type
            properties:
              project_id:
                type: string
                example: 0111039d-27fb-49ba-b172-6e0aa80e37ec
                description: The id of the mpc project.
              name:
                type: string
                example: My mpc vault
                description: The name of the mpc vault.
              vault_type:
                $ref: '#/components/schemas/MPCVaultType'
    updateProjectBody:
      description: The request body to update a mpc project
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                example: My mpc new project name
                description: The name of the mpc project.
    updateVaultBody:
      description: The request body to update a mpc vault
      content:
        application/json:
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
                description: The new name of vault
                example: my mpc vault name
    createTransferBody:
      description: The request body to create a transfer transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transfer'
    createSmartContractCallBody:
      description: The request body to create a smart contract transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SmartContractCall'
    createMessageSignBody:
      description: The request body to create a message sign transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignMessage'
    estimateFeeBody:
      description: The request body to estimate fee of transfer or call transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EstimateFee'
    feeRequestBody:
      description: The request body of fee to initiate transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionFee'
  responses:
    badRequestError:
      description: Bad request. Your request contains malformed syntax or invalid parameters.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    unauthorizedError:
      description: Unauthorized. Please provide valid credentials.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    forbiddenError:
      description: Forbidden. You do not have permission to access to the requested resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    notFoundError:
      description: Resource not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    tooManyRequestError:
      description: Too many requests.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    serviceUnavailableError:
      description: Unknown internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    getChainsResponse:
      description: Successfully listed chains
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/ChainInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAssetsResponse:
      description: Successfully listed assets
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokensResponse:
      description: Successfully listed tokens
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTokenBalancesResponse:
      description: Successfully listed tokens
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/TokenBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAssetBalancesResponse:
      description: Successfully listed tokens
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AssetBalance'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletsResponse:
      description: Successfully listed wallets
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/WalletInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getWalletByIdResponse:
      description: Successful get a wallet info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    createWalletResponse:
      description: Successfully created wallet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    updateWalletResponse:
      description: Successfully updated address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WalletInfo'
    spendableListResponse:
      description: Successfully listed utxo
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UTXO'
    maxSendValueResponse:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MaxSendValue'
    getAddressesResponse:
      description: Successfully listed addresses
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AddressInfo'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getAddressByIdResponse:
      description: Successfully listed addresses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressInfo'
    createAddressResponse:
      description: Successfully created address for a wallet
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
    updateAddressResponse:
      description: Successfully updated address
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddressInfo'
    getAddressValidityResponse:
      description: Successfully get address validity
      content:
        application/json:
          schema:
            type: object
            properties:
              validity:
                type: boolean
                description: The validity of the address.
                example: true
    createKeyGroupsResponse:
      description: mpc vault successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    createMpcProjectResponse:
      description: mpc project successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    createTssRequestResponse:
      $ref: '#/components/responses/createMpcVaultResponse'
    createMpcVaultResponse:
      description: mpc vault successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getCoboKeyHoldersResponse:
      description: Successfully listed mpc tss groups
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyHolder'
    getKeyGroupResponse:
      description: Successfully get mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    getKeyGroupsResponse:
      description: Successfully listed mpc tss groups
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/KeyGroup'
    getMpcProjectResponse:
      description: Successfully listed mpc vaults
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCProject'
    getMpcProjectsResponse:
      description: Successfully listed mpc projects
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MPCProject'
    getTssRequestResponse:
      description: get mpc tss request successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    getMpcVaultResponse:
      description: Successfully get mpc vault
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getMpcVaultsResponse:
      description: Successfully listed mpc vaults
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/MPCVault'
    deleteKeyGroupResponse:
      description: Successfully deleted mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    putKeyGroupResponse:
      description: Successfully modify mpc tss group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyGroup'
    putTssRequestResponse:
      description: modify mpc tss request successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TSSRequest'
    putVaultResponse:
      description: Successfully modify mpc vault
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MPCVault'
    getSubAccountIdsResponse:
      description: Successfully list of exchange sub account ids
      content:
        application/json:
          schema:
            type: array
            description: Sub account id list
            items:
              type: string
            example:
              - f47ac10b-58cc-4372-a567-0e02b2c3d479
    getChainFeeResponse:
      description: Successful get chain fee info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChainFeePrice'
    getTransactionsResponse:
      description: Successfully listed transactions
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
              pagination:
                $ref: '#/components/schemas/Pagination'
    getTransactionByIdResponse:
      description: Successful get a transaction detail
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionDetails'
    estimateFeeResponse:
      description: Successful get a transaction detail
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TransactionFee'
    createTransactionRequestResponse:
      description: Successful create a smart contract call request
      content:
        application/json:
          schema:
            type: object
            properties:
              request_id:
                type: string
                description: Unique id of the request.
                example: f47ac10b-58cc-4372-a567-0e02b2c3d479
              transaction_id:
                type: string
                description: The transaction id of of the request.
                example: 239861be9a4afe080c359b7fe4a1d035945ec46256b1a0f44d1267c71de8ec28
              status:
                $ref: '#/components/schemas/TransactionStatus'
  securitySchemes:
    CoboAuth:
      type: apiKey
      in: header
      name: BIZ-API-KEY
      description: The API key.
security:
  - CoboAuth: []
